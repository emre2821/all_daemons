*** Begin Patch
*** Add File: eden_utils/eden_paths.py
@@
import os
from pathlib import Path

def eden_path(*parts, env_key=None, default_root=None):
    """
    Resolve a path relative to a configurable root. If the environment variable
    specified by env_key is set, that takes precedence. Otherwise, default_root
    is used. If neither is set, the current working directory is used.
    """
    root = (env_key and os.getenv(env_key)) or default_root or os.getcwd()
    return str(Path(root).joinpath(*parts))

SAVE  = lambda *p: eden_path(*p, env_key="EDEN_SAVE_ROOT",   default_root=r"C:\\EdenOS_Origin\\all_daemons\\Rhea\\_work")
LOGS  = lambda *p: eden_path(*p, env_key="EDEN_LOGS_ROOT",   default_root=r"C:\\EdenOS_Origin\\all_daemons\\Rhea\\_logs")
INBOX = lambda *p: eden_path(*p, env_key="EDEN_INBOX_ROOT",  default_root=r"C:\\EdenOS_Origin\\all_daemons\\Rhea\\_inbox")
OUTBX = lambda *p: eden_path(*p, env_key="EDEN_OUTBOX_ROOT", default_root=r"C:\\EdenOS_Origin\\all_daemons\\Rhea\\_outbox")
ARCH  = lambda *p: eden_path(*p, env_key="EDEN_ARCHIVE_ROOT",default_root=r"C:\\EdenOS_Origin\\all_daemons\\Rhea\\_archive")
TMP   = lambda *p: eden_path(*p, env_key="EDEN_TMP_ROOT",    default_root=r"C:\\EdenOS_Origin\\all_daemons\\Rhea\\_tmp")

*** End Patch

*** Begin Patch
*** Add File: eden_utils/__init__.py
@@
"""
Convenience imports for Eden path helpers.
"""

from .eden_paths import SAVE, LOGS, INBOX, OUTBX, ARCH, TMP, eden_path

*** End Patch

*** Begin Patch
*** Update File: Archivus.py
@@
-import os
-import shutil
-import datetime
-import sys
+import os
+import shutil
+import datetime
+import sys
+from eden_utils import INBOX, LOGS
@@
-# Configuration
-SEARCH_ROOT = r"C:\\Users\\emmar"
-SPECIALTY_BASE = r"C:\\EdenOS_Origin\\all_daemons\\specialty_folders\\Archivus"
-OUTPUT_FOLDER = os.path.join(SPECIALTY_BASE, "chaos_queue")
-LOG_FILE = os.path.join(SPECIALTY_BASE, "lost_chaos_log.txt")
-CHAOS_EXTENSIONS = [".chaos", ".chaoscript", ".chaosmeta", ".chaos-ception"]
+# Configuration
+SEARCH_ROOT = r"C:\\Users\\emmar"
+# Use Rhea-standard paths; lost chaos files go into the chaos_queue inbox and logs into logs
+OUTPUT_FOLDER = INBOX("chaos_queue")
+LOG_FILE = LOGS("archivus_lost_chaos_log.txt")
+CHAOS_EXTENSIONS = [".chaos", ".chaoscript", ".chaosmeta", ".chaos-ception"]
@@
-# Ensure specialty folder exists
-os.makedirs(OUTPUT_FOLDER, exist_ok=True)
-os.makedirs(os.path.dirname(LOG_FILE), exist_ok=True)
+# Ensure output and logs folders exist
+os.makedirs(OUTPUT_FOLDER, exist_ok=True)
+os.makedirs(os.path.dirname(LOG_FILE), exist_ok=True)

*** End Patch

*** Begin Patch
*** Update File: AshFall.py
@@
-import os
-import sys
-import time
-
-if sys.platform == "win32":
-    os.system("chcp 65001 > nul")
-    sys.stdout.reconfigure(encoding='utf-8')
-
-# Configuration
-SPECIALTY_BASE = r"C:\\EdenOS_Origin\\all_daemons\\specialty_folders\\AshFall"
-LOG_PATH = os.path.join(SPECIALTY_BASE, 'ashfall_log.txt')
-os.makedirs(SPECIALTY_BASE, exist_ok=True)
+import os
+import sys
+import time
+from eden_utils import LOGS
+
+if sys.platform == "win32":
+    os.system("chcp 65001 > nul")
+    sys.stdout.reconfigure(encoding='utf-8')
+
+# Configuration
+# Use Rhea-standard logs directory
+LOG_PATH = LOGS('ashfall_log.txt')
+os.makedirs(os.path.dirname(LOG_PATH), exist_ok=True)

*** End Patch

*** Begin Patch
*** Update File: Bellwrit.py
@@
-import json
-import os
-import time
-
-SPECIALTY_BASE = r"C:\\EdenOS_Origin\\all_daemons\\specialty_folders\\Bellwrit"
-os.makedirs(SPECIALTY_BASE, exist_ok=True)
-LOG_PATH = os.path.join(SPECIALTY_BASE, 'bellwrit.log')
-CONFIG_PATH = os.path.join(SPECIALTY_BASE, 'config.json')
+import json
+import os
+import time
+from eden_utils import SAVE, LOGS
+
+# Use Rhea-standard save and log directories
+LOG_PATH = os.path.join(LOGS(), 'bellwrit.log')
+CONFIG_PATH = os.path.join(SAVE(), 'bellwrit_config.json')
@@
-def load_config():
+def load_config():
@@
-    config_path = CONFIG_PATH
+    config_path = CONFIG_PATH
@@
-        json.dump({"data_file": os.path.join(SPECIALTY_BASE, "data.txt"), "notification_interval": 5}, f, indent=2)
+        json.dump({"data_file": os.path.join(SAVE(), "bellwrit_data.txt"), "notification_interval": 5}, f, indent=2)

*** End Patch

*** Begin Patch
*** Update File: archive_daemon.py
@@
-import os
-import sys
-import time
-sys.path.append(os.path.join(os.path.dirname(__file__), 'Daemon_tools'))
-from Daemon_tools.vas_converter import convert_vas  
-from Daemon_tools.db_utils import init_db, log_to_db
-
-WATCH_DIR = "to_convert"
-OUTPUT_DIR = "converted"
+import os
+import sys
+import time
+sys.path.append(os.path.join(os.path.dirname(__file__), 'Daemon_tools'))
+from Daemon_tools.vas_converter import convert_vas  
+from Daemon_tools.db_utils import init_db, log_to_db
+from eden_utils import INBOX, ARCH
+
+# Use Rhea-standard inbox/outbox folders
+WATCH_DIR = INBOX('to_convert')
+OUTPUT_DIR = ARCH('converted')
@@
 # Ensure the DB is initialized
 init_db()
+os.makedirs(WATCH_DIR, exist_ok=True)
+os.makedirs(OUTPUT_DIR, exist_ok=True)

*** End Patch

*** Begin Patch
*** Update File: Parsley.py
@@
-import os
-
-INPUT_FILE = "make_a_new_file_list.txt"
-KEEP_FILE = "keep_files.txt"
-PURGE_FILE = "purge_files.txt"
-REVIEW_FILE = "review_files.txt"
+import os
+from eden_utils import SAVE
+
+INPUT_FILE = SAVE("parsley_input_file_list.txt")
+KEEP_FILE = SAVE("parsley_keep_files.txt")
+PURGE_FILE = SAVE("parsley_purge_files.txt")
+REVIEW_FILE = SAVE("parsley_review_files.txt")
@@
-def process_file_list():
-    if not os.path.exists(INPUT_FILE):
-        print(f"File {INPUT_FILE} not found.")
-        return
+def process_file_list():
+    # Ensure directories exist for outputs
+    os.makedirs(os.path.dirname(KEEP_FILE), exist_ok=True)
+    os.makedirs(os.path.dirname(PURGE_FILE), exist_ok=True)
+    os.makedirs(os.path.dirname(REVIEW_FILE), exist_ok=True)
+
+    if not os.path.exists(INPUT_FILE):
+        print(f"File {INPUT_FILE} not found.")
+        return
@@
-    with open(INPUT_FILE, "r", encoding="utf-8", errors="ignore") as infile,          open(KEEP_FILE, "w") as keep_out,          open(PURGE_FILE, "w") as purge_out,          open(REVIEW_FILE, "w") as review_out:
-        
-        for line in infile:
-            path = line.strip()
-            category = classify_file(path)
-            if category == "keep":
-                keep_out.write(path + "\n")
-            elif category == "purge":
-                purge_out.write(path + "\n")
-            else:
-                review_out.write(path + "\n")
+    with open(INPUT_FILE, "r", encoding="utf-8", errors="ignore") as infile, \
+         open(KEEP_FILE, "w") as keep_out, \
+         open(PURGE_FILE, "w") as purge_out, \
+         open(REVIEW_FILE, "w") as review_out:
+
+        for line in infile:
+            path = line.strip()
+            category = classify_file(path)
+            if category == "keep":
+                keep_out.write(path + "\n")
+            elif category == "purge":
+                purge_out.write(path + "\n")
+            else:
+                review_out.write(path + "\n")

*** End Patch

*** Begin Patch
*** Update File: keyla.py
@@
-import os
-import shutil
-import json
-import tkinter as tk
-from tkinter import filedialog
-from tkinter import messagebox
-
-DAEMON_ROOT = "C:/EdenOS_Origin/daemon_profiles"
+import os
+import shutil
+import json
+import tkinter as tk
+from tkinter import filedialog
+from tkinter import messagebox
+from eden_utils import SAVE
+
+# Use Rhea-standard save directory for daemon profiles
+DAEMON_ROOT = SAVE("daemon_profiles")

*** End Patch
